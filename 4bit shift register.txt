`timescale 1ns / 1ps

module shift_register (
    input clk,          // Clock signal
    input reset,        // Reset signal (active high)
    input shift,        // Shift control signal
    input data_in,      // Input data bit
    output reg [3:0] q  // 4-bit output register
);

// Shift register logic
always @(posedge clk or posedge reset) begin
    if (reset)
        q <= 4'b0000;   // Reset output to 0
    else if (shift)
        q <= {q[2:0], data_in}; // Shift left and input new data bit
end

endmodule























`timescale 1ns / 1ps

module shift_register_tb;

// Inputs to the shift register
reg clk;
reg reset;
reg shift;
reg data_in;

// Output from the shift register
wire [3:0] q;

// Instantiate the shift register
shift_register uut (
    .clk(clk),
    .reset(reset),
    .shift(shift),
    .data_in(data_in),
    .q(q)
);

// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk; // 10 ns clock period
end

// Test sequence
initial begin
    // Initialize inputs
    reset = 1;
    shift = 0;
    data_in = 0;

    // Apply reset
    #10 reset = 0;

    // Test case 1: Load initial value (0001)
    shift = 1;
    data_in = 1;
    #10;

    // Test case 2: Shift in 0 (expect 0010)
    data_in = 0;
    #10;

    // Test case 3: Shift in 1 (expect 0101)
    data_in = 1;
    #10;

    // Test case 4: Shift in 0 (expect 1010)
    data_in = 0;
    #10;

    // Test case 5: Reset the shift register
    reset = 1;
    #10 reset = 0;

    // End simulation
    #10 $finish;
end

// Monitor output
initial begin
    $monitor("At time %t: reset=%b, shift=%b, data_in=%b, q=%b", $time, reset, shift, data_in, q);
end

endmodule

