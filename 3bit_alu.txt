// `timescale 1ns / 1ps

module ALU_8bit (
    input [7:0] A,         // 8-bit input A
    input [7:0] B,         // 8-bit input B
    input [2:0] opcode,    // 3-bit control signal to select operation
    output reg [7:0] result, // 8-bit output result
    output reg carry_out   // Carry-out flag for operations
);

always @(*) begin
    carry_out = 0; // Default carry out to 0
    case (opcode)
        3'b000: result = A + B; // Addition
        3'b001: {carry_out, result} = A - B; // Subtraction with borrow
        3'b010: result = A & B; // AND
        3'b011: result = A | B; // OR
        3'b100: result = A ^ B; // XOR
        3'b101: result = ~A; // NOT
        3'b110: result = A << 1; // Left shift
        3'b111: result = A >> 1; // Right shift
        default: result = 8'b0; // Default case
    endcase
end

endmodule
















module ALU_8bit_tb();

// Inputs to the ALU
reg [7:0] A;
reg [7:0] B;
reg [2:0] Opcode;

// Outputs from the ALU
wire [7:0] result;
wire carry_out;

// Instantiate the ALU module
ALU_8bit uut (
    .A(A),
    .B(B),
    .opcode(Opcode),
    .result(result),
    .carry_out(carry_out)
);

// Test sequence
initial begin
    $display("Opcode |    A    |    B    | Result | Carry Out");
    $display("-------|---------|---------|--------|-----------");

    // Test for addition
    A = 8'b00001111; B = 8'b00000001; Opcode = 3'b000; #10;
    $display("ADD    | %b | %b | %b | %b", A, B, result, carry_out);

    // Test for subtraction
    A = 8'b00001111; B = 8'b00000001; Opcode = 3'b001; #10;
    $display("SUB    | %b | %b | %b | %b", A, B, result, carry_out);

    // Test for AND
    A = 8'b00001111; B = 8'b00000001; Opcode = 3'b010; #10;
    $display("AND    | %b | %b | %b | %b", A, B, result, carry_out);

    // Test for OR
    A = 8'b00001111; B = 8'b00000001; Opcode = 3'b011; #10;
    $display("OR     | %b | %b | %b | %b", A, B, result, carry_out);

    // Test for XOR
    A = 8'b00001111; B = 8'b00000001; Opcode = 3'b100; #10;
    $display("XOR    | %b | %b | %b | %b", A, B, result, carry_out);

    // Test for NOT
    A = 8'b00001111; Opcode = 3'b101; #10;
    $display("NOT    | %b | %b | %b | %b", A, B, result, carry_out);

    // Test for Left Shift
    A = 8'b00001111; Opcode = 3'b110; #10;
    $display("LSHIFT | %b | %b | %b | %b", A, B, result, carry_out);

    // Test for Right Shift
    A = 8'b00001111; Opcode = 3'b111; #10;
    $display("RSHIFT | %b | %b | %b | %b", A, B, result, carry_out);

    $finish;
end

endmodule
