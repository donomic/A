// Full Subtractor Module
module FullSubtractor (
    input A,        // Minuend
    input B,        // Subtrahend
    input Bin,      // Borrow In
    output Diff,    // Difference
    output Bout     // Borrow Out
);
    // Logic for Difference and Borrow Out
    assign Diff = A ^ B ^ Bin;              // XOR logic for Difference
    assign Bout = (~A & (B | Bin)) | (B & Bin); // Logic for Borrow Out
endmodule



















`timescale 1ns / 1ps

module FullSubtractor_tb;
    // Testbench signals
    reg A, B, Bin;          // Inputs
    wire Diff, Bout;        // Outputs
    
    // Instantiate the Full Subtractor
    FullSubtractor uut (
        .A(A),
        .B(B),
        .Bin(Bin),
        .Diff(Diff),
        .Bout(Bout)
    );

    // Test stimulus
    initial begin
        // Display header
        $display("A B Bin | Diff Bout");
        $monitor("%b %b  %b  |   %b    %b", A, B, Bin, Diff, Bout);

        // Test all input combinations
        A = 0; B = 0; Bin = 0; #10;
        A = 0; B = 0; Bin = 1; #10;
        A = 0; B = 1; Bin = 0; #10;
        A = 0; B = 1; Bin = 1; #10;
        A = 1; B = 0; Bin = 0; #10;
        A = 1; B = 0; Bin = 1; #10;
        A = 1; B = 1; Bin = 0; #10;
        A = 1; B = 1; Bin = 1; #10;

        // End simulation
        $finish;
    end
endmodule
